<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 3.0.1">

    <issue
        id="GradleCompatible"
        severity="Fatal"
        message="All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes). Found versions 27.1.0, 27.0.2. Examples include `com.android.support:animated-vector-drawable:27.1.0` and `com.android.support:design:27.0.2`"
        category="Correctness"
        priority="8"
        summary="Incompatible Gradle Versions"
        explanation="There are some combinations of libraries, or tools and libraries, that are incompatible, or can lead to bugs. One such incompatibility is compiling with a version of the Android support libraries that is not the latest version (or in particular, a version lower than your `targetSdkVersion`.)"
        quickfix="studio">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\build.gradle"/>
    </issue>

    <issue
        id="CustomViewStyleable"
        severity="Warning"
        message="By convention, the custom view (`MarqueeView`) and the declare-styleable (`MarqueeViewStyle`) should have the same name (various editor features rely on this convention)"
        category="Correctness"
        priority="6"
        summary="Mismatched Styleable/Custom View Name"
        explanation="The convention for custom views is to use a `declare-styleable` whose name matches the custom view class name. The IDE relies on this convention such that for example code completion can be offered for attributes in a custom view in layout XML resource files.&#xA;&#xA;(Similarly, layout parameter classes should use the suffix `_Layout`.)"
        errorLine1="        TypedArray typedArray = getContext().obtainStyledAttributes(attrs, R.styleable.MarqueeViewStyle, defStyleAttr, 0);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\MarqueeView.java"
            line="53"
            column="24"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="                .alertButtonListView);"
        errorLine2="                                   ^">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\alertview\AlertView.java"
            line="181"
            column="36"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="                            LinearLayout.LayoutParams.MATCH_PARENT);"
        errorLine2="                       ~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\alertview\AlertView.java"
            line="245"
            column="24"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="            view=inflater.inflate(R.layout.item_alertbutton, null);"
        errorLine2="            ~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\alertview\AlertViewAdapter.java"
            line="50"
            column="13"/>
    </issue>

    <issue
        id="AppCompatCustomView"
        severity="Error"
        message="This custom view should extend `android.support.v7.widget.AppCompatImageView` instead"
        category="Correctness"
        priority="4"
        summary="Appcompat Custom Widgets"
        explanation="In order to support features such as tinting, the appcompat library will automatically load special appcompat replacements for the builtin widgets. However, this does not work for your own custom views.&#xA;&#xA;Instead of extending the `android.widget` classes directly, you should instead extend one of the delegate classes in `android.support.v7.widget.AppCompat`."
        errorLine1="public class MovingImageView extends ImageView {"
        errorLine2="      ~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\MovingImageView.java"
            line="32"
            column="7"/>
    </issue>

    <issue
        id="AppCompatCustomView"
        severity="Error"
        message="This custom view should extend `android.support.v7.widget.AppCompatImageView` instead"
        category="Correctness"
        priority="4"
        summary="Appcompat Custom Widgets"
        explanation="In order to support features such as tinting, the appcompat library will automatically load special appcompat replacements for the builtin widgets. However, this does not work for your own custom views.&#xA;&#xA;Instead of extending the `android.widget` classes directly, you should instead extend one of the delegate classes in `android.support.v7.widget.AppCompat`."
        errorLine1=" */"
        errorLine2=" ^">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\SimpleTagImageView.java"
            line="45"
            column="2"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="                    canvas.drawLine(mControlPoints.get(i - 1).x, mControlPoints.get(i - 1).y, point.x, point.y,"
        errorLine2="                                                                                                              ^">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\BezierView.java"
            line="390"
            column="111"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="                }"
        errorLine2="        ^">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\BezierView.java"
            line="392"
            column="9"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="                        canvas.drawCircle(tps.get(j + 1).x, tps.get(j + 1).y, CONTROL_RADIUS, mTangentPaint);"
        errorLine2="                                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\BezierView.java"
            line="415"
            column="74"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="                if (i > 0) {"
        errorLine2="                ^">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\BezierView.java"
            line="438"
            column="17"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="                    canvas.drawLine(mControlPoints.get(i - 1).x, mControlPoints.get(i - 1).y, point.x, point.y,"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\BezierView.java"
            line="439"
            column="40"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `LinearLayout`: `layout_centerHorizontal`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="        android:layout_centerHorizontal=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\layout\dialog_layout.xml"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a `LinearLayout`: `layout_centerVertical`"
        category="Performance"
        priority="6"
        summary="Obsolete layout params"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="        android:layout_centerVertical=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\layout\dialog_layout.xml"
            line="22"
            column="9"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is never &lt; 15"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        Display display = windowManager.getDefaultDisplay();"
        errorLine2="                                                ^">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\util\DeviceUtils.java"
            line="25"
            column="49"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 15"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="                if (x + scrollX >= child.getLeft() &amp;&amp; x + scrollX &lt; child.getRight() &amp;&amp;"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\NoPreloadViewPager.java"
            line="1489"
            column="47"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (anonymous android.os.Handler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private int mWidth = 0, mHeight = 0;    // 画布宽高"
        errorLine2="                                      ^">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\BezierView.java"
            line="90"
            column="39"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_height` of `0dp` instead of `wrap_content` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="        android:layout_height=&quot;wrap_content&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\layout\layout_alertview_actionsheet.xml"
            line="11"
            column="9"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_height` of `0dp` instead of `match_parent` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="            android:layout_height=&quot;match_parent&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\layout\layout_alertview_actionsheet.xml"
            line="34"
            column="13"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a LinearLayout with non-zero weights is nested inside another LinearLayout with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="            android:layout_weight=&quot;1.0&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\layout\layout_alertview_actionsheet.xml"
            line="32"
            column="13"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/bgColor_overlay` with a theme that also paints a background (inferred theme is `@android:style/Theme.Holo`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/bgColor_overlay&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\layout\layout_alertview.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.clock` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        quickfix="studio">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\drawable\clock.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.style.AlertActivity_AlertStyle` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;style name=&quot;AlertActivity_AlertStyle&quot; parent=&quot;android:Theme.Dialog&quot;>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\values\styles.xml"
            line="12"
            column="12"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/clock.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\drawable\clock.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/hotsale.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\drawable\hotsale.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/ic_filter.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\drawable\ic_filter.png"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="`onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        if (isCancelable) {"
        errorLine2="       ~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\alertview\AlertView.java"
            line="419"
            column="8"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `BezierView` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="                canvas.drawCircle(point.x, point.y, CONTROL_RADIUS, mControlPaint);"
        errorLine2="                                                                    ~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\BezierView.java"
            line="442"
            column="69"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `MultiShapeView` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        mIsPressed = pressed;"
        errorLine2="   ~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\MultiShapeView.java"
            line="318"
            column="4"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `NoPreloadViewPager` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="                mActivePointerId = MotionEventCompat.getPointerId(ev, 0);"
        errorLine2="                                    ~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\NoPreloadViewPager.java"
            line="1067"
            column="37"/>
    </issue>

    <issue
        id="KeyboardInaccessibleWidget"
        severity="Warning"
        message="&apos;clickable&apos; attribute found, please also add &apos;focusable&apos;"
        category="Accessibility"
        priority="3"
        summary="Keyboard inaccessible widget"
        explanation="A widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the `focusable` attribute as well."
        errorLine1="    android:clickable=&quot;true&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\layout\layout_alertview.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="KeyboardInaccessibleWidget"
        severity="Warning"
        message="&apos;clickable&apos; attribute found, please also add &apos;focusable&apos;"
        category="Accessibility"
        priority="3"
        summary="Keyboard inaccessible widget"
        explanation="A widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the `focusable` attribute as well."
        errorLine1="        android:clickable=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\res\layout\layout_alertview_actionsheet.xml"
            line="48"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.START`&quot; instead of &quot;`Gravity.LEFT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    private boolean singleLine = false;"
        errorLine2="                                     ^">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\MarqueeView.java"
            line="38"
            column="38"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`Gravity.END`&quot; instead of &quot;`Gravity.RIGHT`&quot; to ensure correct behavior in right-to-left locales"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            case TEXT_GRAVITY_RIGHT:"
        errorLine2="    ~~~~~">
        <location
            file="F:\Projects\MyGithub\EasyAndroid\easyviews\src\main\java\com\easytools\views\MarqueeView.java"
            line="68"
            column="5"/>
    </issue>

</issues>
